{"version":3,"sources":["core/overlay/scroll/scrollable.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EAAE,UAAU,EACtB,MAAM,eAAe;OACf,EAAC,UAAU,EAAC,MAAM,iBAAiB;OACnC,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;OAC7C,+BAA+B;AAGtC;;;;GAIG;AAIH;IACE,oBAAoB,WAAuB,EAAU,OAAyB;QAA1D,gBAAW,GAAX,WAAW,CAAY;QAAU,YAAO,GAAP,OAAO,CAAkB;IAAG,CAAC;IAElF,6BAAQ,GAAR;QACE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,gCAAW,GAAX;QACE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,wFAAwF;IACxF,oCAAe,GAAf;QACE,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;IAjBH;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;SAC7B,CAAC;;kBAAA;IAgBF,iBAAC;AAAD,CAfA,AAeC,IAAA","file":"scrollable.js","sourcesContent":["import {\n  Directive, ElementRef, OnInit, OnDestroy\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport 'rxjs/add/observable/fromEvent';\n\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable]'\n})\nexport class Scrollable implements OnInit, OnDestroy {\n  constructor(private _elementRef: ElementRef, private _scroll: ScrollDispatcher) {}\n\n  ngOnInit() {\n    this._scroll.register(this);\n  }\n\n  ngOnDestroy() {\n    this._scroll.deregister(this);\n  }\n\n  /** Returns observable that emits when the scroll event is fired on the host element. */\n  elementScrolled(): Observable<any> {\n    return Observable.fromEvent(this._elementRef.nativeElement, 'scroll');\n  }\n}\n"]}